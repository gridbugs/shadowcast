#[macro_use]
extern crate criterion;
extern crate grid_2d;
extern crate shadowcast;

use criterion::Criterion;
use grid_2d::{Coord, Grid, Size};
use shadowcast::{vision_distance, ShadowcastContext};
use std::marker::PhantomData;

type Opacity = u8;

trait VisionCell {
    fn transparent() -> Self;
    fn set_opacity(&mut self, opacity: Opacity);
    fn get_opacity(&self) -> Opacity;
    fn force_use(&self);
}

impl VisionCell for u8 {
    fn transparent() -> Self {
        0
    }
    fn set_opacity(&mut self, opacity: Opacity) {
        *self = opacity;
    }
    fn get_opacity(&self) -> Opacity {
        *self
    }
    fn force_use(&self) {}
}

impl VisionCell for u16 {
    fn transparent() -> Self {
        0
    }
    fn set_opacity(&mut self, opacity: Opacity) {
        *self = opacity as u16;
    }
    fn get_opacity(&self) -> Opacity {
        *self as Opacity
    }
    fn force_use(&self) {}
}

impl VisionCell for u32 {
    fn transparent() -> Self {
        0
    }
    fn set_opacity(&mut self, opacity: Opacity) {
        *self = opacity as u32;
    }
    fn get_opacity(&self) -> Opacity {
        *self as Opacity
    }
    fn force_use(&self) {}
}

impl VisionCell for u64 {
    fn transparent() -> Self {
        0
    }
    fn set_opacity(&mut self, opacity: Opacity) {
        *self = opacity as u64;
    }
    fn get_opacity(&self) -> Opacity {
        *self as Opacity
    }
    fn force_use(&self) {}
}

const BIG_SIZE: usize = 64;

#[derive(Clone)]
struct BigOpacity {
    opacity: u8,
    other: [u64; BIG_SIZE],
}

impl VisionCell for BigOpacity {
    fn transparent() -> Self {
        let mut other = [0; BIG_SIZE];
        for (i, o) in other.iter_mut().enumerate() {
            *o = i as u64;
        }
        Self { opacity: 0, other }
    }
    fn set_opacity(&mut self, opacity: Opacity) {
        self.opacity = opacity;
    }
    fn get_opacity(&self) -> Opacity {
        self.opacity
    }
    fn force_use(&self) {
        for (index, &value) in self.other.iter().enumerate() {
            assert!(index as u64 == value);
        }
    }
}

const MEDIUM_SIZE: usize = 32;

#[derive(Clone)]
struct MediumOpacity {
    opacity: u8,
    other: [u64; MEDIUM_SIZE],
}

impl VisionCell for MediumOpacity {
    fn transparent() -> Self {
        let mut other = [0; MEDIUM_SIZE];
        for (i, o) in other.iter_mut().enumerate() {
            *o = i as u64;
        }
        Self { opacity: 0, other }
    }
    fn set_opacity(&mut self, opacity: Opacity) {
        self.opacity = opacity;
    }
    fn get_opacity(&self) -> Opacity {
        self.opacity
    }
    fn force_use(&self) {
        for (index, &value) in self.other.iter().enumerate() {
            assert!(index as u64 == value);
        }
    }
}

const SMALL_SIZE: usize = 16;

#[derive(Clone)]
struct SmallOpacity {
    opacity: u8,
    other: [u64; SMALL_SIZE],
}

impl VisionCell for SmallOpacity {
    fn transparent() -> Self {
        let mut other = [0; SMALL_SIZE];
        for (i, o) in other.iter_mut().enumerate() {
            *o = i as u64;
        }
        Self { opacity: 0, other }
    }
    fn set_opacity(&mut self, opacity: Opacity) {
        self.opacity = opacity;
    }
    fn get_opacity(&self) -> Opacity {
        self.opacity
    }
    fn force_use(&self) {
        for (index, &value) in self.other.iter().enumerate() {
            assert!(index as u64 == value);
        }
    }
}

struct Vision<Cell: VisionCell>(PhantomData<Cell>);
impl<Cell: VisionCell> Vision<Cell> {
    fn new() -> Self {
        Vision(PhantomData)
    }
}
impl<Cell: VisionCell> shadowcast::InputGrid for Vision<Cell> {
    type Grid = Grid<Cell>;
    type Opacity = Opacity;
    fn size(&self, grid: &Self::Grid) -> Size {
        grid.size()
    }
    fn get_opacity(&self, grid: &Self::Grid, coord: Coord) -> Self::Opacity {
        grid.get_checked(coord).get_opacity()
    }
}

struct Benchmark<Cell: VisionCell> {
    grid: Grid<Cell>,
    shadowcast: ShadowcastContext<Opacity>,
    eye: Coord,
    vision: Vision<Cell>,
    vision_distance: vision_distance::Diamond,
}

impl<Cell: VisionCell + Clone> Benchmark<Cell> {
    fn new(strings: &[&str], vision_distance: u32) -> Self {
        let height = strings.len();
        let width = strings[0].len();
        let size = Size::new(width as u32, height as u32);
        let mut grid = Grid::new_clone(size, Cell::transparent());
        let mut eye = None;
        for (y, s) in strings.iter().enumerate() {
            for (x, c) in s.chars().enumerate() {
                let coord = Coord::new(x as i32, y as i32);
                let cell = grid.get_mut(coord).expect("out of bounds");
                let opacity = match c {
                    '.' => 0,
                    '#' => 255,
                    '%' => 128,
                    '@' => {
                        eye = Some(coord);
                        0
                    }
                    _ => panic!(),
                };
                cell.set_opacity(opacity);
            }
        }
        let eye = eye.expect("no eye");
        let shadowcast = ShadowcastContext::new();
        let vision = Vision::new();
        let vision_distance = vision_distance::Diamond::new(vision_distance);
        Self {
            grid,
            eye,
            shadowcast,
            vision,
            vision_distance,
        }
    }
    fn count_visible_cells(&mut self) -> usize {
        let mut count = 0;
        self.shadowcast.for_each_visible(
            self.eye,
            &self.vision,
            &self.grid,
            self.vision_distance,
            255,
            |_coord, _directions, _visibility| count += 1,
        );
        count
    }
    fn bench(&mut self) {
        let count = self.count_visible_cells();
        criterion::black_box(count);
    }
    fn force_use(&self) {
        for cell in self.grid.iter() {
            cell.force_use();
        }
    }
}
aeu
type CharGrid = &'static [&'static str];

fn make_benchmarks(area: CharGrid, vision_distance: u32, name: &str, c: &mut Criterion) {
    c.bench_function(&format!("{} u8 {}", name, vision_distance), move |b| {
        let mut bm: Benchmark<u8> = Benchmark::new(area, vision_distance);
        b.iter(|| bm.bench());
        bm.force_use();
    });
    c.bench_function(&format!("{} u16 {}", name, vision_distance), move |b| {
        let mut bm: Benchmark<u8> = Benchmark::new(area, vision_distance);
        b.iter(|| bm.bench());
        bm.force_use();
    });
    c.bench_function(&format!("{} u32 {}", name, vision_distance), move |b| {
        let mut bm: Benchmark<u8> = Benchmark::new(area, vision_distance);
        b.iter(|| bm.bench());
        bm.force_use();
    });
    c.bench_function(&format!("{} u64 {}", name, vision_distance), move |b| {
        let mut bm: Benchmark<u8> = Benchmark::new(area, vision_distance);
        b.iter(|| bm.bench());
        bm.force_use();
    });
    c.bench_function(
        &format!("{} SmallOpacity {}", name, vision_distance),
        move |b| {
            let mut bm: Benchmark<SmallOpacity> = Benchmark::new(area, vision_distance);
            b.iter(|| bm.bench());
            bm.force_use();
        },
    );
    c.bench_function(
        &format!("{} MediumOpacity {}", name, vision_distance),
        move |b| {
            let mut bm: Benchmark<MediumOpacity> = Benchmark::new(area, vision_distance);
            b.iter(|| bm.bench());
            bm.force_use();
        },
    );
    c.bench_function(
        &format!("{} BigOpacity {}", name, vision_distance),
        move |b| {
            let mut bm: Benchmark<BigOpacity> = Benchmark::new(area, vision_distance);
            b.iter(|| bm.bench());
            bm.force_use();
        },
    );
}

fn make_all(vision_distance: u32, c: &mut Criterion) {
    make_benchmarks(EMPTY_SPACE, vision_distance, "empty", c);
    make_benchmarks(SCATERED, vision_distance, "scatered", c);
    make_benchmarks(ROOMS, vision_distance, "rooms", c);
}

fn criterion_benchmark(c: &mut Criterion) {
    make_all(128, c);
    make_all(64, c);
    make_all(32, c);
    make_all(16, c);
    make_all(8, c);
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);

const EMPTY_SPACE: CharGrid = &[
    ".........................................................................................",
    ".#######################################################################################.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#..........................................@..........................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#######################################################################################.",
    ".........................................................................................",
];

const SCATERED: CharGrid = &[
    ".........................................................................................",
    ".#######################################################################################.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.................................#...................................................#.",
    ".#..............#.......................................#..............................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#......................#.............................................#................#.",
    ".#..............#..............................#.......................................#.",
    ".#.....................................................................................#.",
    ".#......................................................#..............................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#............#.......#............#.........#.........................................#.",
    ".#......................................#..............................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................#............#..................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.........................#...........................................................#.",
    ".#.....................................................................................#.",
    ".#..................................#..................................................#.",
    ".#............................................................#........................#.",
    ".#..........................................@..........................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#..................................................................#..................#.",
    ".#.....................................................................................#.",
    ".#.........................#...........................................................#.",
    ".#..............................................................#......................#.",
    ".#....................................................#................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#..............................#......................................................#.",
    ".#.....................................................................................#.",
    ".#..............................................#......................................#.",
    ".#........................................................#............................#.",
    ".#.....................................................................................#.",
    ".#........................#.............#..............................................#.",
    ".#........................................................................#............#.",
    ".#......................................................#..............................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#..........................#..........................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#######################################################################################.",
    ".........................................................................................",
];

const ROOMS: CharGrid = &[
    ".........................................................................................",
    ".#######################################################################################.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.......................................########......................................#.",
    ".#.......................................#......#......................................#.",
    ".#.......................................#......#......................................#.",
    ".#.......................................#......#......................................#.",
    ".#....................................######.#####.....................................#.",
    ".#..............................#######..........#.....................................#.",
    ".#..............................#.....#..........#.....................................#.",
    ".#..............................#.....#..........#########.............................#.",
    ".#..............................#................#.......#.............................#.",
    ".#..............................#.....#.....@....#.......#.............................#.",
    ".#..............................#######..................#.............................#.",
    ".#....................................#..........#.......#.............................#.",
    ".#....................................#..........#.......#.............................#.",
    ".#....................................##.#################.............................#.",
    ".#....................................#.....#..........................................#.",
    ".#....................................#.....#..........................................#.",
    ".#....................................#.....#..........................................#.",
    ".#....................................#######..........................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#.....................................................................................#.",
    ".#######################################################################################.",
    ".........................................................................................",
];
